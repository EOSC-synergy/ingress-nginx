apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: name-based-virtualhost-ingress
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request      /_oauth2_token_introspection;
    nginx.ingress.kubernetes.io/server-snippet: |
      location = /_oauth2_token_introspection {
          # This location implements an auth_request server that uses the JavaScript
          # module to perform the token introspection request.
          internal;
          js_content introspectAccessToken;
      }
      
      location = /_oauth2_send_introspection_request {
          # This location is called by introspectAccessToken(). We use the proxy_
          # directives to construct an OAuth 2.0 token introspection request, as per:
          #  https://tools.ietf.org/html/rfc7662#section-2
          internal;
          gunzip on; # Decompress if necessary
          proxy_method      POST;
          proxy_set_header  Authorization $arg_authorization;
          proxy_set_header  Content-Type "application/x-www-form-urlencoded";
          proxy_set_body    "token=$arg_token&token_hint=$oauth_token_hint";
          proxy_pass        $oauth_token_endpoint;
      
          proxy_cache           token_responses; # Enable caching of token introspection responses
          proxy_cache_key       $access_token;   # Cache the response for each unique access token
          proxy_cache_lock      on;              # Don't allow simultaneous requests for same token
          proxy_cache_valid     200 10s;         # How long to use cached introspection responses
          proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server
          proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
      }
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-headers: "*"
spec:
  tls:
    - secretName: sqaaas-api-prod-secret
  rules:
  - host: api.sqaaas.eosc-synergy.eu
    http:
      paths:
      - backend:
          serviceName: sqaaas-api-prod-service
          servicePort: 80
